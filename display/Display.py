import curses

class Display:
    """
    The primary class that draws onto and interacts with the terminal through
    the `curses` library. Designed to be called within the `wrapper` function.
    Specifically, maintains a pad that draws onto the main window which can be
    updated using `Pixel`s generated by objects like `Drawer`s.
    """

    ### CONSTANTS

    REFRESH_RATE_HZ = 20
    DEBUG_HEIGHT    = 5 # arbitrary
    DEBUG_WIDTH     = 20 

    ### INITIALISATION

    def __init__(self,
                 stdscr: curses.window,
                 refreshRate: int = REFRESH_RATE_HZ,
                 doDebug: bool = False):
        self.stdscr = stdscr
        self.height, self.width = stdscr.getmaxyx()
        self.refreshRate = refreshRate

        self.resetStats()

        self.doDebug = doDebug
        self.debugWindow = curses.newwin(self.DEBUG_HEIGHT, self.DEBUG_WIDTH, 0, 0)

    def resetStats(self):
        """
        Resets all the stored statistics (e.g. number of refreshes since init) to their defaults.
        """
        self.numUpdates = 0       # number of global updates
        self.numRefreshes = 0     # number of window refreshes
        self.pixelsDrawn = 0      # number of pixels drawn

    def drawDebug(self,
                  isBatched=True):
        """
        Draws the debug window, a window positioned on the top left that displays program
        stats. If `isBatched` is False, refreshes the screen after drawing.
        """
        self.debugWindow.addnstr(
            0, 0, "## DEBUG ##", self.DEBUG_WIDTH, curses.A_REVERSE
        )
        self.debugWindow.addnstr(
            1, 0, f"numUpdates: {self.numUpdates}", self.DEBUG_WIDTH, curses.A_REVERSE
        )
        self.debugWindow.addnstr(
            2, 0, f"numRefreshes: {self.numRefreshes}", self.DEBUG_WIDTH, curses.A_REVERSE
        )
        self.debugWindow.addnstr(
            3, 0, f"pixelsDrawn: {self.pixelsDrawn}", self.DEBUG_WIDTH, curses.A_REVERSE
        )
        self.debugWindow.noutrefresh()
        self.numRefreshes += 1
        if not isBatched:
            self.refresh()

    def refresh(self):
        """
        Refreshes the screen, drawing all accumulated updates. Also updates internal stats.
        """
        self.numUpdates += 1
        curses.doupdate()
